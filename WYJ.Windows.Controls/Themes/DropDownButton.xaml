<!--***********************************************************************************

   Extended WPF Toolkit

   Copyright (C) 2007-2013 Xceed Software Inc.

   This program is provided to you under the terms of the Microsoft Public
   License (Ms-PL) as published at http://wpftoolkit.codeplex.com/license 

   For more features, controls, and fast professional support,
   pick up the Plus Edition at http://xceed.com/wpf_toolkit

   Stay informed: follow @datagrid on Twitter or Like http://facebook.com/datagrids

  **********************************************************************************-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WYJ.Windows.Controls"
                    xmlns:themes="clr-namespace:WYJ.Windows.Themes"
                    xmlns:wyj="http://schemas.wyj.com/2014/xaml">
    <Style TargetType="{x:Type local:DropDownButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource {x:Static wyj:ResourceKeys.ButtonNormalBackgroundKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static wyj:ResourceKeys.ButtonNormalForegroundKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wyj:ResourceKeys.ButtonNormalOuterBorderKey}}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DropDownButton}">
                    <Grid x:Name="MainGrid"
                		SnapsToDevicePixels="True">
                        <ToggleButton x:Name="PART_DropDownButton"
                			Grid.Column="1"
                			IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                			<!--IsHitTestVisible="{Binding IsOpen, Converter={StaticResource InverseBoolConverter}, RelativeSource={RelativeSource TemplatedParent}}">-->
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Grid>
                                <local:ButtonChrome x:Name="ToggleButtonChrome"
                					Background="{TemplateBinding Background}"
                					Foreground="{TemplateBinding Foreground}"
                					BorderThickness="{TemplateBinding BorderThickness}"
                					BorderBrush="{TemplateBinding BorderBrush}"
                					CornerRadius="2.75"
                					RenderChecked="{TemplateBinding IsOpen}"
                					RenderEnabled="{TemplateBinding IsEnabled}"
                					RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}"
                					RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Margin="{TemplateBinding Padding}"
                							Content="{TemplateBinding Content}"
                							ContentTemplate="{TemplateBinding ContentTemplate}"
                							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                							RecognizesAccessKey="true" />
                                        <Grid x:Name="arrowGlyph"
                							IsHitTestVisible="False"
                							Margin="4,3,4,3"
                							Grid.Column="1">
                                            <Path x:Name="Arrow"
                								Width="7"
                								Height="4"
                								Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
                								Fill="#FF000000" />
                                        </Grid>
                                    </Grid>
                                </local:ButtonChrome>
                            </Grid>
                        </ToggleButton>

                        <Popup x:Name="PART_Popup"
                			AllowsTransparency="True"
                			StaysOpen="False"
                			Placement="Bottom"
                			IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton,Mode=TwoWay}">
                            <Border Background="{TemplateBinding PopupBackground}">
                                <ContentPresenter x:Name="PART_ContentPresenter"
                					Content="{TemplateBinding DropDownContent}" />
                            </Border>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>
                		<Trigger Property="IsMouseOver" Value="true">
                			<Setter Property="Background" Value="{DynamicResource {x:Static wyj:ResourceKeys.ButtonMouseOverBackgroundKey}}"/>
                			<Setter Property="Foreground" Value="{DynamicResource {x:Static wyj:ResourceKeys.ButtonMouseOverForegroundKey}}"/>
                			<Setter Property="IsOpen" TargetName="PART_Popup" Value="True"/>
                		</Trigger>
                		<Trigger Property="IsEnabled" Value="False">
                			<Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
                			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                		</Trigger>
                	</ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
