<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:WYJ.Windows.Controls"
    xmlns:themes="clr-namespace:WYJ.Windows.Themes">
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=ButtonNormalBackgroundKey}" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=ButtonMouseOverBackgroundKey}" Color="#CCD6D6D6"/>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=ButtonPressedBackgroundKey}" Color="#FFC6C6C6"/>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=ButtonNormalForegroundKey}" Color="#FF000000"/>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=ButtonMouseOverForegroundKey}" Color="Black"/>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=ButtonPressedForegroundKey}" Color="Black"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"></BooleanToVisibilityConverter>
    <Style TargetType="local:ImageButton">
        <Setter Property="Margin" Value="0,2"/>
        <Setter Property="Padding" Value="5,2"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonNormalBackgroundKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonNormalForegroundKey}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MouseOverBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverBackgroundKey}}"/>
        <Setter Property="PressedBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedBackgroundKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ImageButton">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnMouseEnter1"/>
                    </ControlTemplate.Resources>
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBrush"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="MouseOverImage">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PressedBrush"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PressedImage">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".6" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Background"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                            <Grid>
                                <Border x:Name="MouseOverBrush" Background="{TemplateBinding MouseOverBrush}" CornerRadius="2" Opacity="0"/>
                                <Border x:Name="PressedBrush" Background="{TemplateBinding PressedBrush}" CornerRadius="2" Opacity="0"/>
                                <StackPanel Orientation="{TemplateBinding Orientation}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <Grid>
                                        <Border x:Name="BorderNormal" Visibility="{TemplateBinding ImageSource,Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Image x:Name="NomalImage" Source="{TemplateBinding ImageSource}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}"/>
                                        </Border>
                                        <Border Visibility="{TemplateBinding MouseOverImageSource,Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Image x:Name="MouseOverImage" Source="{TemplateBinding MouseOverImageSource}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}" Visibility="Collapsed"/>
                                        </Border>
                                        <Border Visibility="{TemplateBinding PressedImageSource,Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Image x:Name="PressedImage" Source="{TemplateBinding PressedImageSource}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}" Visibility="Collapsed"/>
                                        </Border>
                                    </Grid>
                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverForegroundKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedForegroundKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasContent" Value="True"/>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="Visibility" SourceName="BorderNormal" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="contentPresenter" Value="4,0,0,0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasContent" Value="false"/>
                                <Condition Property="Orientation" Value="Horizontal"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Padding" Value="0"/>
                        </MultiTrigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
